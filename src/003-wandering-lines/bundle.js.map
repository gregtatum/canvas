{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "/Users/gregorytatum/me/wandering-lines/3/index.js",
    "/Users/gregorytatum/me/wandering-lines/lib/draw.js",
    "/Users/gregorytatum/me/wandering-lines/lib/intersection.js",
    "/Users/gregorytatum/me/wandering-lines/lib/shortcuts.js",
    "/Users/gregorytatum/me/wandering-lines/node_modules/@tatumcreative/random/prng/alea.js",
    "/Users/gregorytatum/me/wandering-lines/node_modules/@tatumcreative/random/random.js",
    "/Users/gregorytatum/me/wandering-lines/node_modules/keycode/index.js",
    "/Users/gregorytatum/me/wandering-lines/node_modules/lerp/index.js",
    "/Users/gregorytatum/me/wandering-lines/node_modules/rbush/rbush.js",
    "/Users/gregorytatum/me/wandering-lines/node_modules/simplex-noise/simplex-noise.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "var Rbush        = require('rbush')\nvar Simplex      = require('simplex-noise')\nvar Lerp         = require('lerp')\nvar Random       = require('@tatumcreative/random')\nvar Intersection = require('../lib/intersection')\nvar Draw         = require('../lib/draw')\nvar Shortcuts    = require('../lib/shortcuts')\nvar TAU          = Math.PI * 2\n\nfunction _cutOutIntersections( neighbors, bounds ) {\n\n\tvar lineEnd\n\tvar lastDistance = Infinity\n\n\tvar a = bounds.line\n\n\tneighbors.forEach(function(neighbor) {\n\n\t\tvar b = neighbor.line\n\n\t\tvar intersection = Intersection(\n\t\t\ta[0], a[1], a[2], a[3],\n\t\t\tb[0], b[1], b[2], b[3]\n\t\t)\n\t\tif( intersection ) {\n\t\t\tvar intersectionDistance = (\n\t\t\t\t( intersection[0] - a[0] ) * ( intersection[0] - a[0] )  +\n\t\t\t\t( intersection[1] - a[1] ) * ( intersection[1] - a[1] )\n\t\t\t)\n\t\t\tif( intersectionDistance < lastDistance ) {\n\t\t\t\tlastDistance = intersectionDistance\n\t\t\t\tlineEnd = intersection\n\t\t\t}\n\t\t}\n\t})\n\n\tif( lineEnd ) {\n\t\treturn _lineToBounds([ a[0], a[1], lineEnd[0], lineEnd[1] ])\n\t}\n\n\treturn false\n}\n\nfunction _lineToBounds( line ) {\n\n\tvar bounds = [\n\t\tMath.min(line[0],line[2]),\n\t\tMath.min(line[1],line[3]),\n\t\tMath.max(line[0],line[2]),\n\t\tMath.max(line[1],line[3]),\n\t]\n\n\tbounds.line = line\n\tbounds.theta = Math.atan2( line[3] - line[1], line[2] - line[0] )\n\treturn bounds\n}\n\nfunction _newLine( current, config, x, y, prevTheta, generation, now ) {\n\n\tvar noise = config.simplex3(\n\t\tx * config.simplexScale,\n\t\ty * config.simplexScale,\n\t\tnow * config.simplexDepthScale\n\t)\n\n\tvar theta = prevTheta - (noise - noise * 0.5) * config.turnSpeed\n\n\tvar newX = x + Math.cos( theta ) * config.lineLength\n\tvar newY = y + Math.sin( theta ) * config.lineLength\n\n\tvar newBounds = _lineToBounds([ x, y, newX, newY ])\n\tvar neighbors = current.tree.search( newBounds )\n\n\tvar cutBounds = _cutOutIntersections( neighbors, newBounds )\n\n\tif( cutBounds ) {\n\t\tnewBounds = cutBounds\n\t}\n\tnewBounds.line.generation = generation\n\tcurrent.tree.insert( newBounds )\n\tcurrent.lines.push( newBounds.line )\n\tcurrent.newLines.push( newBounds.line )\n\n\tif( !cutBounds ) {\n\t\treturn newBounds\n\t}\n}\n\nfunction _createStageBoundary( config, current ) {\n\n\tvar centerX = 0.5\n\tvar centerY = 0.5\n\n\tvar size = config.margin * 0.5\n\n\tvar x1 = centerX - size\n\tvar x2 = centerX + size\n\tvar y1 = centerY - size\n\tvar y2 = centerY + size\n\n\t// current.tree.insert( _lineToBounds([x1,y1,x2,y1]) )\n\t// current.tree.insert( _lineToBounds([x2,y1,x2,y2]) )\n\t// current.tree.insert( _lineToBounds([x2,y2,x1,y2]) )\n\t// current.tree.insert( _lineToBounds([x1,y2,x1,y1]) )\n\n\tcurrent.stageBoundary = [\n\t\tLerp( centerX, x1, 0.5 ),\n\t\tLerp( centerY, y1, 0.5 ),\n\t\tLerp( centerX, x2, 0.5 ),\n\t\tLerp( centerY, y2, 0.5 ),\n\t]\n}\n\nfunction _createInitialLine( current, config ) {\n\n\tvar x = config.random( current.stageBoundary[0], current.stageBoundary[2] )\n\tvar y = config.random( current.stageBoundary[1], current.stageBoundary[3] )\n\tvar generation = Math.log( current.generation++ )\n\tvar iteration = 0\n\tvar theta = 0\n\n\tcurrent.active[0] = _newLine(\n\t\tcurrent, config, 0.5, 0.5, theta, generation, iteration\n\t)\n}\n\nfunction _updateLines( current, config ) {\n\tvar active = current.active\n\tvar newBranches = []\n\tcurrent.iteration++\n\tcurrent.newLines.length = 0\n\n\tfor( var i = 0; i < config.maxLines && i < active.length; i++ ) {\n\t\tvar index = (current.activeIndex + i) % active.length\n\t\tvar bounds = active[index]\n\n\t\tif( bounds ) {\n\t\t\tvar x = bounds.line[2]\n\t\t\tvar y = bounds.line[3]\n\t\t\tvar generation = bounds.generation\n\n\t\t\tif( config.random() < config.chanceToBranch ) {\n\t\t\t\tnewBranches.push(\n\t\t\t\t\t_startBranch( current, config, bounds.line )\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tactive[index] = _newLine(\n\t\t\t\tcurrent, config, x, y, bounds.theta, generation, current.iteration\n\t\t\t)\n\t\t} else {\n\t\t\t// Remove any dead lines\n\t\t\tactive.splice(index, 1)\n\t\t\ti--\n\t\t}\n\t}\n\tcurrent.active = active.concat(newBranches)\n\tcurrent.activeIndex = i % active.length\n\tcurrent.firstRun = false\n}\n\nfunction _startBranch( current, config, line ) {\n\n\tvar dx = (line[2] - line[0]) * config.nubSize\n\tvar dy = (line[3] - line[1]) * config.nubSize\n\n\t// Choose either or side\n\tvar normal = config.random() > 0.5 ? [-dy, dx] : [dy, -dx]\n\n\tvar x = (line[0] + line[2]) / 2\n\tvar y = (line[1] + line[3]) / 2\n\n\tvar bounds = _lineToBounds([\n\t\tx + normal[0] * 0.5,\n\t\ty + normal[1] * 0.5,\n\t\tx + normal[0],\n\t\ty + normal[1]\n\t])\n\n\tbounds.line.generation = Math.pow((line.generation || 2), 2)\n\n\tcurrent.tree.insert( bounds )\n\tcurrent.lines.push( bounds.line )\n\tcurrent.active.push( bounds )\n\tcurrent.newLines.push( bounds.line )\n\n\treturn bounds\n}\n\nfunction init() {\n\n\tvar seed = window.location.hash.substr(1) || String(Math.random()).split('.')[1]\n\tvar random = Random( seed )\n\tvar simplex = new Simplex( random )\n\tvar simplex3 = simplex.noise3D.bind(simplex)\n\n\tShortcuts(seed)\n\tconsole.log('current seed', seed)\n\n\tvar config = {\n\t\tmargin: 1.5,\n\t\tmaxLines : 200,\n\t\trandom : random,\n\t\tsimplex3 : simplex3,\n\t\tlineLength : 0.002,\n\t\tsimplexScale : 1,\n\t\tsimplexDepthScale : 0.0001,\n\t\tnubSize : 0.001,\n\t\tchanceToBranch : 0.1,\n\t\tturnSpeed : Math.PI * 0.01\n\t}\n\n\tvar current = {\n\t\tfirstRun : true,\n\t\ttree : Rbush(9),\n\t\tactive : [],\n\t\tactiveIndex : 0,\n\t\tlines : [],\n\t\tnewLines : [],\n\t\tstageBoundary : null,\n\t\tgeneration : 2,\n\t\titeration : 0,\n\t}\n\n\t_createStageBoundary( config, current )\n\t_createInitialLine( current, config )\n\tvar draw = Draw( current )\n\n\tfunction loop() {\n\t\t_updateLines( current, config )\n\t\tdraw()\n\t\trequestAnimationFrame( loop )\n\t}\n\trequestAnimationFrame(loop)\n\n\twindow.onhashchange = function () {\n\t\tlocation.reload()\n\t}\n}\n\ninit()\n",
    "var TAU = Math.PI * 2\n\nfunction _drawLines( ctx, config, plot, lines ) {\n\tctx.strokeStyle = config.lineColor\n\tctx.lineCap = 'round'\n\t\n\tlines.forEach(function( line ) {\n\t\tctx.lineWidth = plot.line(\n\t\t\t(10 - line.generation) / 10 * config.lineWidth\n\t\t)\n\t\tctx.beginPath()\n\t\tctx.moveTo(\n\t\t\tplot.x(line[0], line[1]),\n\t\t\tplot.y(line[0], line[1])\n\t\t)\n\t\tctx.lineTo(\n\t\t\tplot.x(line[2], line[3]),\n\t\t\tplot.y(line[2], line[3])\n\t\t)\n\t\tctx.stroke()\n\t\tctx.closePath()\n\t})\n}\n\nfunction _prepCanvasAndGetCtx(canvas) {\n\t\n\tfunction resize() {\n\t\tcanvas.width = window.innerWidth * devicePixelRatio\n\t\tcanvas.height = window.innerHeight * devicePixelRatio\n\t}\n\tresize(), window.addEventListener('resize', resize, false)\n\t\n\treturn canvas.getContext('2d')\n}\n\nfunction _setupPlotting(config, current, canvas) {\n\t// [-1,1] range to approximately [0,canvas.size]\n\tfunction resize() {\n\t\tcurrent.ratio = canvas.width / canvas.height\n\t\t\n\t\tif( current.ratio < 1 ) {\n\t\t\tcurrent.width = canvas.width\n\t\t\tcurrent.height = canvas.height * current.ratio\n\t\t} else {\n\t\t\tcurrent.ratio = 1 / current.ratio\n\t\t\tcurrent.width = canvas.width * current.ratio\n\t\t\tcurrent.height = canvas.height\n\t\t}\n\t\t\n\t\tcurrent.offsetX = (canvas.width - current.width) / 2\n\t\tcurrent.offsetY = (canvas.height - current.height) / 2\n\t\t\n\t\tcurrent.size = (\n\t\t\tMath.sqrt(canvas.width * canvas.width + canvas.height * canvas.height)\n\t\t\t/ config.baseScreenDiagonal\n\t\t)\n\t}\n\tresize(), window.addEventListener('resize', resize, false)\n\t\n\tvar cos = Math.cos(config.rotation)\n\tvar sin = Math.sin(config.rotation)\n\t\n\treturn {\n\t\tx : function (x, y) {\n\t\t\tx -= 0.5; y -= 0.5\n\t\t\tvar xp = x*cos - y*sin + 0.5\n\t\t\treturn current.offsetX + xp * current.width\n\t\t},\n\t\ty : function (x, y) {\n\t\t\tx -= 0.5; y -= 0.5\n\t\t\tvar yp = x*sin + y*cos + 0.5\n\t\t\treturn current.offsetY + yp * current.height\n\t\t},\n\t\tline : function(n) {\n\t\t\treturn n * current.size\n\t\t}\n\t}\n}\n\nmodule.exports = function setupDraw( graph ) {\n\n\tvar config = {\n\t\tbaseScreenDiagonal : 1000,\n\t\tlineWidth : 2,\n\t\tlineColor : \"#ddd\",\n\t\trotation : Math.PI / 4\n\t}\n\tvar current = {\n\t\tratio : 1,\n\t\twidth : 0,\n\t\theight : 0,\n\t}\n\t\n\tvar canvas = document.querySelector('canvas')\n\tvar ctx = _prepCanvasAndGetCtx(canvas)\n\tvar plot = _setupPlotting(config, current, canvas)\n\t\n\tfunction draw(redrawAll) {\n\t\tvar lines = redrawAll ? graph.lines : graph.newLines\n\t\t_drawLines( ctx, config, plot, lines )\n\t}\n\t\n\twindow.addEventListener('resize', draw.bind(null, true), false)\n\treturn draw\n}\n",
    "// Adapted from https://github.com/psalaets/line-intersect/\n// Paul Salaets <psalaets@gmail.com>\n// MIT License\n\nmodule.exports = function checkIntersection( x1, y1, x2, y2, x3, y3, x4, y4 ) {\n\t\n\tif(\n\t\t(x1 === x3 && y1 == y3) ||\n\t\t(x1 === x4 && y1 == y4) ||\n\t\t(x2 === x3 && y2 == y3) ||\n\t\t(x2 === x4 && y2 == y4)\n\t) {\n\t\treturn false\n\t}\n\t\t\n\t\n\tvar denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\n\tvar numeA = ((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3));\n\tvar numeB = ((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3));\n\n\tif( denom === 0 || (numeA === 0 && numeB === 0) ) {\n\t\treturn false\n\t}\n\n\tvar uA = numeA / denom;\n\tvar uB = numeB / denom;\n\n\tif( uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1 ) {\n\t\treturn [\n\t\t\t(uA * (x2 - x1)) + x1,\n\t\t\t(uA * (y2 - y1)) + y1\n\t\t]\n\t}\n}",
    "var Keycode = require('keycode')\n\nfunction _click( selector ) {\n  var el = document.querySelector( selector )\n  if( el ) el.click()\n}\n\nfunction executeIfExists(fn) {\n  if(typeof fn === 'function') {\n    fn()\n  }\n}\n\nmodule.exports = function shortcuts(seed) {\n\n  window.addEventListener('keydown', function(event) {\n    switch (Keycode(event)) {\n      case \"h\":\n        document.body.classList.toggle('hide-ui')\n        break;\n      case \"r\":\n        window.location.reload()\n        break;\n      case \"s\":\n        history.pushState(null, document.title, window.location.pathname + \"#\" + seed)\n        break;\n      case \"f\":\n        if( document.fullscreenElement ) {\n          document.exitFullscreen ? document.exitFullscreen() : null\n        } else {\n          var canvas = document.querySelector('canvas')\n          canvas.requestFullscreen ? canvas.requestFullscreen() : null\n        }\n        break;\n      case \"left\":\n        _click('#prev')\n        break;\n      case \"right\":\n        _click('#next')\n        break;\n    }\n  }, false)\n\n}\n",
    "// Adapted and modified by Greg Tatum\n\nfunction _mashFn() {\n\t\n\tvar n = 0xefc8249d\n\t\n\treturn function mash( data ) {\n\t\t\n\t\tdata = data.toString()\n\t\n\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\tn += data.charCodeAt(i)\n\t\t\tvar h = 0.02519603282416938 * n\n\t\t\tn = h >>> 0\n\t\t\th -= n\n\t\t\th *= n\n\t\t\tn = h >>> 0\n\t\t\th -= n\n\t\t\tn += h * 0x100000000 // 2^32\n\t\t}\n\t\treturn (n >>> 0) * 2.3283064365386963e-10 // 2^-32\n\t}\n}\n\nmodule.exports = function createAleaPrngFn( /* seeds */ ) {\n\t\n\tvar args = Array.prototype.slice.call(arguments)\n\t\n\tvar s0 = 0\n\tvar s1 = 0\n\tvar s2 = 0\n\tvar c = 1\n\n\tif (args.length === 0) {\n\t\targs = [+new Date]\n\t}\n\t\n\tvar mash = _mashFn()\n\t\n\ts0 = s1 = s2 = mash(' ')\n\n\tfor(var i = 0; i < args.length; i++) {\n\t\t\n\t\ts0 -= mash(args[i])\n\t\tif (s0 < 0) { s0 += 1 }\n\t\ts1 -= mash(args[i])\n\t\tif (s1 < 0) { s1 += 1 }\n\t\ts2 -= mash(args[i])\n\t\tif (s2 < 0) { s2 += 1 }\n\t}\n\n\treturn function aleaPrng() {\n\t\tvar t = 2091639 * s0 + c * 2.3283064365386963e-10 // 2^-32\n\t\ts0 = s1\n\t\ts1 = s2\n\t\treturn s2 = t - (c = t | 0)\n\t}\n}",
    "var Alea = require('./prng/alea')\n\nmodule.exports = function seededRandomFn(/* seed */) {\n\t\n\tvar random = Alea.apply(this, arguments)\n\t\n\treturn function seededRandom( min, max, isBoolean ) {\n\t\t\n\t\tmin = min === undefined ? 0 : min\n\t\tmax = max === undefined ? 1 : max\n\t\tvar value = min + random() * (max - min)\n\t\t\n\t\treturn isBoolean ? parseInt( value, 10 ) : value\n\t}\n}",
    "// Source: http://jsfiddle.net/vWx8V/\n// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes\n\n/**\n * Conenience method returns corresponding value for given keyName or keyCode.\n *\n * @param {Mixed} keyCode {Number} or keyName {String}\n * @return {Mixed}\n * @api public\n */\n\nexports = module.exports = function(searchInput) {\n  // Keyboard Events\n  if (searchInput && 'object' === typeof searchInput) {\n    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode\n    if (hasKeyCode) searchInput = hasKeyCode\n  }\n\n  // Numbers\n  if ('number' === typeof searchInput) return names[searchInput]\n\n  // Everything else (cast to string)\n  var search = String(searchInput)\n\n  // check codes\n  var foundNamedKey = codes[search.toLowerCase()]\n  if (foundNamedKey) return foundNamedKey\n\n  // check aliases\n  var foundNamedKey = aliases[search.toLowerCase()]\n  if (foundNamedKey) return foundNamedKey\n\n  // weird character?\n  if (search.length === 1) return search.charCodeAt(0)\n\n  return undefined\n}\n\n/**\n * Get by name\n *\n *   exports.code['enter'] // => 13\n */\n\nvar codes = exports.code = exports.codes = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'ctrl': 17,\n  'alt': 18,\n  'pause/break': 19,\n  'caps lock': 20,\n  'esc': 27,\n  'space': 32,\n  'page up': 33,\n  'page down': 34,\n  'end': 35,\n  'home': 36,\n  'left': 37,\n  'up': 38,\n  'right': 39,\n  'down': 40,\n  'insert': 45,\n  'delete': 46,\n  'command': 91,\n  'right click': 93,\n  'numpad *': 106,\n  'numpad +': 107,\n  'numpad -': 109,\n  'numpad .': 110,\n  'numpad /': 111,\n  'num lock': 144,\n  'scroll lock': 145,\n  'my computer': 182,\n  'my calculator': 183,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222\n}\n\n// Helper aliases\n\nvar aliases = exports.aliases = {\n  'windows': 91,\n  '⇧': 16,\n  '⌥': 18,\n  '⌃': 17,\n  '⌘': 91,\n  'ctl': 17,\n  'control': 17,\n  'option': 18,\n  'pause': 19,\n  'break': 19,\n  'caps': 20,\n  'return': 13,\n  'escape': 27,\n  'spc': 32,\n  'pgup': 33,\n  'pgdn': 33,\n  'ins': 45,\n  'del': 46,\n  'cmd': 91\n}\n\n\n/*!\n * Programatically add the following\n */\n\n// lower case chars\nfor (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32\n\n// numbers\nfor (var i = 48; i < 58; i++) codes[i - 48] = i\n\n// function keys\nfor (i = 1; i < 13; i++) codes['f'+i] = i + 111\n\n// numpad keys\nfor (i = 0; i < 10; i++) codes['numpad '+i] = i + 96\n\n/**\n * Get by code\n *\n *   exports.name[13] // => 'Enter'\n */\n\nvar names = exports.names = exports.title = {} // title for backward compat\n\n// Create reverse mapping\nfor (i in codes) names[codes[i]] = i\n\n// Add aliases\nfor (var alias in aliases) {\n  codes[alias] = aliases[alias]\n}\n",
    "function lerp(v0, v1, t) {\n    return v0*(1-t)+v1*t\n}\nmodule.exports = lerp",
    "/*\n (c) 2015, Vladimir Agafonkin\n RBush, a JavaScript library for high-performance 2D spatial indexing of points and rectangles.\n https://github.com/mourner/rbush\n*/\n\n(function () {\n'use strict';\n\nfunction rbush(maxEntries, format) {\n\n    // jshint newcap: false, validthis: true\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node.bbox)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child.bbox;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node.bbox)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child.bbox;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from stratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = {\n            children: [],\n            height: 1,\n            bbox: empty(),\n            leaf: true\n        };\n        return this;\n    },\n\n    remove: function (item) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = node.children.indexOf(item);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node.bbox, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: function (a, b) { return a[0] - b[0]; },\n    compareMinY: function (a, b) { return a[1] - b[1]; },\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = {\n                children: items.slice(left, right + 1),\n                height: 1,\n                bbox: null,\n                leaf: true\n            };\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = {\n            children: [],\n            height: height,\n            bbox: null,\n            leaf: false\n        };\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child.bbox);\n                enlargement = enlargedArea(bbox, child.bbox) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode;\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item.bbox : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node.bbox, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = {\n            children: node.children.splice(splitIndex, node.children.length - splitIndex),\n            height: node.height,\n            bbox: null,\n            leaf: false\n        };\n\n        if (node.leaf) newNode.leaf = true;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = {\n            children: [node, newNode],\n            height: node.height + 1,\n            bbox: null,\n            leaf: false\n        };\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child.bbox);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child.bbox);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i].bbox, bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        // jshint evil: true\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a', 'return [a' + format.join(', a') + '];');\n    }\n};\n\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    node.bbox = distBBox(node, 0, node.children.length, toBBox);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox) {\n    var bbox = empty();\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(bbox, node.leaf ? toBBox(child) : child.bbox);\n    }\n\n    return bbox;\n}\n\nfunction empty() { return [Infinity, Infinity, -Infinity, -Infinity]; }\n\nfunction extend(a, b) {\n    a[0] = Math.min(a[0], b[0]);\n    a[1] = Math.min(a[1], b[1]);\n    a[2] = Math.max(a[2], b[2]);\n    a[3] = Math.max(a[3], b[3]);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.bbox[0] - b.bbox[0]; }\nfunction compareNodeMinY(a, b) { return a.bbox[1] - b.bbox[1]; }\n\nfunction bboxArea(a)   { return (a[2] - a[0]) * (a[3] - a[1]); }\nfunction bboxMargin(a) { return (a[2] - a[0]) + (a[3] - a[1]); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b[2], a[2]) - Math.min(b[0], a[0])) *\n           (Math.max(b[3], a[3]) - Math.min(b[1], a[1]));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a[0], b[0]),\n        minY = Math.max(a[1], b[1]),\n        maxX = Math.min(a[2], b[2]),\n        maxY = Math.min(a[3], b[3]);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a[0] <= b[0] &&\n           a[1] <= b[1] &&\n           b[2] <= a[2] &&\n           b[3] <= a[3];\n}\n\nfunction intersects(a, b) {\n    return b[0] <= a[2] &&\n           b[1] <= a[3] &&\n           b[2] >= a[0] &&\n           b[3] >= a[1];\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        select(arr, left, right, mid, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n\n// Floyd-Rivest selection algorithm:\n// sort an array between left and right (inclusive) so that the smallest k elements come first (unordered)\nfunction select(arr, left, right, k, compare) {\n    var n, i, z, s, sd, newLeft, newRight, t, j;\n\n    while (right > left) {\n        if (right - left > 600) {\n            n = right - left + 1;\n            i = k - left + 1;\n            z = Math.log(n);\n            s = 0.5 * Math.exp(2 * z / 3);\n            sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (i - n / 2 < 0 ? -1 : 1);\n            newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n            newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n            select(arr, newLeft, newRight, k, compare);\n        }\n\n        t = arr[k];\n        i = left;\n        j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\n\n// export as AMD/CommonJS module or global variable\nif (typeof define === 'function' && define.amd) define('rbush', function () { return rbush; });\nelse if (typeof module !== 'undefined') module.exports = rbush;\nelse if (typeof self !== 'undefined') self.rbush = rbush;\nelse window.rbush = rbush;\n\n})();\n",
    "/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n *\n *\n * Copyright (C) 2012 Jonas Wagner\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n */\n(function () {\n\"use strict\";\n\nvar F2 = 0.5 * (Math.sqrt(3.0) - 1.0),\n    G2 = (3.0 - Math.sqrt(3.0)) / 6.0,\n    F3 = 1.0 / 3.0,\n    G3 = 1.0 / 6.0,\n    F4 = (Math.sqrt(5.0) - 1.0) / 4.0,\n    G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n\nfunction SimplexNoise(random) {\n    if (!random) random = Math.random;\n    this.p = new Uint8Array(256);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 256; i++) {\n        this.p[i] = random() * 256;\n    }\n    for (i = 0; i < 512; i++) {\n        this.perm[i] = this.p[i & 255];\n        this.permMod12[i] = this.perm[i] % 12;\n    }\n\n}\nSimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n                            - 1, 1, 0,\n                            1, - 1, 0,\n\n                            - 1, - 1, 0,\n                            1, 0, 1,\n                            - 1, 0, 1,\n\n                            1, 0, - 1,\n                            - 1, 0, - 1,\n                            0, 1, 1,\n\n                            0, - 1, 1,\n                            0, 1, - 1,\n                            0, - 1, - 1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, - 1, 0, 1, - 1, 1, 0, 1, - 1, - 1,\n                            0, - 1, 1, 1, 0, - 1, 1, - 1, 0, - 1, - 1, 1, 0, - 1, - 1, - 1,\n                            1, 0, 1, 1, 1, 0, 1, - 1, 1, 0, - 1, 1, 1, 0, - 1, - 1,\n                            - 1, 0, 1, 1, - 1, 0, 1, - 1, - 1, 0, - 1, 1, - 1, 0, - 1, - 1,\n                            1, 1, 0, 1, 1, 1, 0, - 1, 1, - 1, 0, 1, 1, - 1, 0, - 1,\n                            - 1, 1, 0, 1, - 1, 1, 0, - 1, - 1, - 1, 0, 1, - 1, - 1, 0, - 1,\n                            1, 1, 1, 0, 1, 1, - 1, 0, 1, - 1, 1, 0, 1, - 1, - 1, 0,\n                            - 1, 1, 1, 0, - 1, 1, - 1, 0, - 1, - 1, 1, 0, - 1, - 1, - 1, 0]),\n    noise2D: function (xin, yin) {\n        var permMod12 = this.permMod12,\n            perm = this.perm,\n            grad3 = this.grad3;\n        var n0=0, n1=0, n2=0; // Noise contributions from the three corners\n        // Skew the input space to determine which simplex cell we're in\n        var s = (xin + yin) * F2; // Hairy factor for 2D\n        var i = Math.floor(xin + s);\n        var j = Math.floor(yin + s);\n        var t = (i + j) * G2;\n        var X0 = i - t; // Unskew the cell origin back to (x,y) space\n        var Y0 = j - t;\n        var x0 = xin - X0; // The x,y distances from the cell origin\n        var y0 = yin - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        else {\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        var y1 = y0 - j1 + G2;\n        var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n        var y2 = y0 - 1.0 + 2.0 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        var ii = i & 255;\n        var jj = j & 255;\n        // Calculate the contribution from the three corners\n        var t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            var gi0 = permMod12[ii + perm[jj]] * 3;\n            t0 *= t0;\n            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n        }\n        var t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n            t1 *= t1;\n            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n        }\n        var t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n            t2 *= t2;\n            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function (xin, yin, zin) {\n        var permMod12 = this.permMod12,\n            perm = this.perm,\n            grad3 = this.grad3;\n        var n0, n1, n2, n3; // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n        var i = Math.floor(xin + s);\n        var j = Math.floor(yin + s);\n        var k = Math.floor(zin + s);\n        var t = (i + j + k) * G3;\n        var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n        var Y0 = j - t;\n        var Z0 = k - t;\n        var x0 = xin - X0; // The x,y,z distances from the cell origin\n        var y0 = yin - Y0;\n        var z0 = zin - Z0;\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // X Y Z order\n            else if (x0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // X Z Y order\n            else {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // Z X Y order\n        }\n        else { // x0<y0\n            if (y0 < z0) {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Z Y X order\n            else if (x0 < z0) {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Y Z X order\n            else {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // Y X Z order\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n        var y1 = y0 - j1 + G3;\n        var z1 = z0 - k1 + G3;\n        var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n        var y2 = y0 - j2 + 2.0 * G3;\n        var z2 = z0 - k2 + 2.0 * G3;\n        var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n        var y3 = y0 - 1.0 + 3.0 * G3;\n        var z3 = z0 - 1.0 + 3.0 * G3;\n        // Work out the hashed gradient indices of the four simplex corners\n        var ii = i & 255;\n        var jj = j & 255;\n        var kk = k & 255;\n        // Calculate the contribution from the four corners\n        var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0) n0 = 0.0;\n        else {\n            var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n            t0 *= t0;\n            n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n        }\n        var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0) n1 = 0.0;\n        else {\n            var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n            t1 *= t1;\n            n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n        }\n        var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0) n2 = 0.0;\n        else {\n            var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n            t2 *= t2;\n            n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n        }\n        var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0) n3 = 0.0;\n        else {\n            var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n            t3 *= t3;\n            n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n        return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function (x, y, z, w) {\n        var permMod12 = this.permMod12,\n            perm = this.perm,\n            grad4 = this.grad4;\n\n        var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n        var s = (x + y + z + w) * F4; // Factor for 4D skewing\n        var i = Math.floor(x + s);\n        var j = Math.floor(y + s);\n        var k = Math.floor(z + s);\n        var l = Math.floor(w + s);\n        var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n        var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n        var Y0 = j - t;\n        var Z0 = k - t;\n        var W0 = l - t;\n        var x0 = x - X0; // The x,y,z,w distances from the cell origin\n        var y0 = y - Y0;\n        var z0 = z - Z0;\n        var w0 = w - W0;\n        // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n        // To find out which of the 24 possible simplices we're in, we need to\n        // determine the magnitude ordering of x0, y0, z0 and w0.\n        // Six pair-wise comparisons are performed between each possible pair\n        // of the four coordinates, and the results are used to rank the numbers.\n        var rankx = 0;\n        var ranky = 0;\n        var rankz = 0;\n        var rankw = 0;\n        if (x0 > y0) rankx++;\n        else ranky++;\n        if (x0 > z0) rankx++;\n        else rankz++;\n        if (x0 > w0) rankx++;\n        else rankw++;\n        if (y0 > z0) ranky++;\n        else rankz++;\n        if (y0 > w0) ranky++;\n        else rankw++;\n        if (z0 > w0) rankz++;\n        else rankw++;\n        var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n        var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n        var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n        // impossible. Only the 24 indices which have non-zero entries make any sense.\n        // We use a thresholding to set the coordinates in turn from the largest magnitude.\n        // Rank 3 denotes the largest coordinate.\n        i1 = rankx >= 3 ? 1 : 0;\n        j1 = ranky >= 3 ? 1 : 0;\n        k1 = rankz >= 3 ? 1 : 0;\n        l1 = rankw >= 3 ? 1 : 0;\n        // Rank 2 denotes the second largest coordinate.\n        i2 = rankx >= 2 ? 1 : 0;\n        j2 = ranky >= 2 ? 1 : 0;\n        k2 = rankz >= 2 ? 1 : 0;\n        l2 = rankw >= 2 ? 1 : 0;\n        // Rank 1 denotes the second smallest coordinate.\n        i3 = rankx >= 1 ? 1 : 0;\n        j3 = ranky >= 1 ? 1 : 0;\n        k3 = rankz >= 1 ? 1 : 0;\n        l3 = rankw >= 1 ? 1 : 0;\n        // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n        var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n        var y1 = y0 - j1 + G4;\n        var z1 = z0 - k1 + G4;\n        var w1 = w0 - l1 + G4;\n        var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n        var y2 = y0 - j2 + 2.0 * G4;\n        var z2 = z0 - k2 + 2.0 * G4;\n        var w2 = w0 - l2 + 2.0 * G4;\n        var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n        var y3 = y0 - j3 + 3.0 * G4;\n        var z3 = z0 - k3 + 3.0 * G4;\n        var w3 = w0 - l3 + 3.0 * G4;\n        var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n        var y4 = y0 - 1.0 + 4.0 * G4;\n        var z4 = z0 - 1.0 + 4.0 * G4;\n        var w4 = w0 - 1.0 + 4.0 * G4;\n        // Work out the hashed gradient indices of the five simplex corners\n        var ii = i & 255;\n        var jj = j & 255;\n        var kk = k & 255;\n        var ll = l & 255;\n        // Calculate the contribution from the five corners\n        var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n        if (t0 < 0) n0 = 0.0;\n        else {\n            var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n            t0 *= t0;\n            n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n        }\n        var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n        if (t1 < 0) n1 = 0.0;\n        else {\n            var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n            t1 *= t1;\n            n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n        }\n        var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n        if (t2 < 0) n2 = 0.0;\n        else {\n            var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n            t2 *= t2;\n            n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n        }\n        var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n        if (t3 < 0) n3 = 0.0;\n        else {\n            var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n            t3 *= t3;\n            n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n        }\n        var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n        if (t4 < 0) n4 = 0.0;\n        else {\n            var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n            t4 *= t4;\n            n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n        }\n        // Sum up and scale the result to cover the range [-1,1]\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n\n\n};\n\n// amd\nif (typeof define !== 'undefined' && define.amd) define(function(){return SimplexNoise;});\n//common js\nif (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n// browser\nelse if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n// nodejs\nif (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n}\n\n})();\n"
  ]
}