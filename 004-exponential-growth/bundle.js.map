{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "004-exponential-growth/index.js",
    "lib/draw.js",
    "lib/lerpTheta.js",
    "lib/shortcuts.js",
    "node_modules/@tatumcreative/random/prng/alea.js",
    "node_modules/@tatumcreative/random/random.js",
    "node_modules/eases/sine-in-out.js",
    "node_modules/lerp/index.js",
    "node_modules/rtree/lib/geojson.js",
    "node_modules/rtree/lib/index.js",
    "node_modules/rtree/lib/rectangle.js",
    "node_modules/rtree/lib/rtree.js",
    "node_modules/simplex-noise/simplex-noise.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "const Simplex = require(\"simplex-noise\");\nconst setupRandom = require(\"@tatumcreative/random\");\nconst initializeShortcuts = require(\"../lib/shortcuts\");\nconst { setupCanvas, loop, generateSeed } = require(\"../lib/draw\");\nconst { lerpTheta } = require(\"../lib/lerpTheta\");\nconst lerp = require(\"lerp\");\nconst createRtree = require(\"rtree\");\nconst ease = require(\"eases/sine-in-out\");\nconst TAU = Math.PI * 2;\n\n{\n  const seed = generateSeed();\n  const random = setupRandom(seed);\n  const simplex = new Simplex(random);\n  const simplex3 = simplex.noise3D.bind(simplex);\n  const ctx = setupCanvas();\n\n  initializeShortcuts(seed);\n\n  const config = {\n    ctx,\n    seed,\n    random,\n    simplex3,\n\n    entityWanderSimplexRatio: 0.0001,\n    maxEntityCount: 1000, // How many entities can be made?\n    entityLiveCount: 30, // How many entities are alive initially?\n    entitySize: 10,\n    entitySlowDown: 0.5,\n    entitySpeedUp: 0.01,\n    entityThetaJitterRange: 0.05,\n    entityBaseSpeed: 2,\n    entitySubdivideEnergyLevel: 100, // The level at which an entities subdivides.\n    entityMinLiving: 5, // Don't kill the last entities.\n    entityMinSpeed: 0.5,\n    entityMaxSpeed: 2.5,\n    entitySearchRadius: 100,\n    entityLerpThetaT: 0.05,\n    entityFeedRate: 0.7,\n    entityCostToMove: 0.1,\n\n    deadTimeDecomposing: 5,\n    deadSpeedSlowdown: 0.97,\n\n    foodCount: 50,\n    minFoodGrowthRate: 1.001, // Exponential factor\n    maxFoodGrowthRate: 1.005, // Exponential factor\n    minFoodQuantity: 20,\n    maxFoodQuantity: 2000,\n    foodDrawnSize: 2,\n    foodDrawnSteps: 4,\n    // Once food has this quantity, entities won't touch it.\n    minFeedQuantity: 5,\n    foodSimplexDistribution: 500,\n  };\n\n  const rtree = createRtree();\n  const { entities, livingEntities, deadEntities } = generateEntities(config);\n\n  // Mutable state.\n  const current = {\n    rtree,\n    entities,\n    livingEntities,\n    deadEntities,\n    recentlyDead: new Set(),\n    foods: generateFood(config, rtree),\n    now: Date.now(),\n    dt: 0,\n  };\n\n  loop(now => {\n    current.dt = now - current.time;\n    current.time = now;\n    updateFoods(config, current);\n    updateEntities(config, current);\n    updateRecentlyDead(config, current);\n    draw(config, current);\n  });\n\n  window.addEventListener(\"resize\", () => {\n    current.rtree = createRtree();\n    for (const food of current.foods) {\n      food.x = random() * ctx.canvas.width;\n      food.y = random() * ctx.canvas.height;\n    }\n    addFoodsToRtree(current.foods, current.rtree);\n  });\n\n  window.current = current;\n  window.config = config;\n}\n\nfunction updateFoods(config, current) {\n  for (const food of current.foods) {\n    food.quantity = Math.min(\n      (food.quantity = Math.pow(food.quantity, food.growthRate)),\n      food.maxFoodQuantity\n    );\n  }\n}\n\nfunction updateEntities(config, current) {\n  const { livingEntities } = current;\n  const { ctx, entityMaxSpeed, entityCostToMove } = config;\n  const { width, height } = ctx.canvas;\n\n  for (const entity of livingEntities) {\n    const food = getClosestFood(config, current, entity);\n\n    if (food && food.quantity > 10) {\n      // There is food, and there is enough to go eat. Go towards it.\n      moveToFood(config, entity, food);\n    } else {\n      wander(config, entity);\n    }\n\n    entity.speed = Math.min(entity.speed, entityMaxSpeed);\n\n    // Consume energy to move\n    entity.energy -= entity.speed * entityCostToMove;\n    entity.energy = Math.max(0, entity.energy);\n\n    // Apply the speed.\n    entity.x += Math.cos(entity.theta) * entity.speed;\n    entity.y += Math.sin(entity.theta) * entity.speed;\n\n    keepEntityInRange(config, width, height, entity);\n    maybeSubdivideEntity(config, current, entity);\n    maybeKillEntity(config, current, entity);\n  }\n}\n\nfunction updateRecentlyDead(config, current) {\n  const { deadSpeedSlowdown, deadTimeDecomposing } = config;\n  const { recentlyDead, dt } = current;\n  for (const dead of recentlyDead) {\n    dead.age -= dt;\n    if (dead.age <= 0) {\n      recentlyDead.delete(dead);\n    }\n    dead.speed *= deadSpeedSlowdown;\n    dead.x += Math.cos(dead.theta) * dead.speed;\n    dead.y += Math.sin(dead.theta) * dead.speed;\n    dead.energy = dead.energyAtDeath * (dead.age / deadTimeDecomposing);\n  }\n}\n\nfunction wander(config, entity) {\n  const {\n    entityLerpThetaT,\n    entitySpeedUp,\n    entityMinSpeed,\n    simplex3,\n    entityWanderSimplexRatio,\n  } = config;\n\n  entity.speed *= 1 + entitySpeedUp;\n  entity.speed = Math.max(entityMinSpeed, entity.speed);\n\n  const thetaTarget =\n    Math.PI *\n    simplex3(\n      entity.x * entityWanderSimplexRatio,\n      entity.y * entityWanderSimplexRatio,\n      entity.index\n    );\n\n  entity.theta =\n    lerpTheta(entity.theta, thetaTarget, entityLerpThetaT) + entity.thetaJitter;\n}\n\nfunction moveToFood(config, entity, food) {\n  const { entitySlowDown, entityLerpThetaT, entityFeedRate } = config;\n\n  const dx = entity.x - food.x;\n  const dy = entity.y - food.y;\n  const distSq = dx * dx + dy * dy;\n\n  const thetaTarget = Math.atan2(food.y - entity.y, food.x - entity.x);\n  entity.speed /= 1 + (entitySlowDown * food.quantity) / distSq;\n  entity.energy += entityFeedRate;\n  food.quantity -= entityFeedRate;\n  entity.theta = lerpTheta(entity.theta, thetaTarget, entityLerpThetaT);\n}\n\nfunction getClosestFood(config, current, entity) {\n  const { x, y } = entity;\n  const { rtree } = current;\n  const { entitySearchRadius, minFeedQuantity } = config;\n  const nearbyFoods = rtree.bbox(\n    x - entitySearchRadius,\n    y - entitySearchRadius,\n    x + entitySearchRadius,\n    y + entitySearchRadius\n  );\n\n  if (nearbyFoods.length === 0) {\n    return null;\n  }\n  // Look for the closest food with the most quantity.\n  let food;\n  let distSq;\n  for (const newFood of nearbyFoods) {\n    if (newFood.quantity < minFeedQuantity) {\n      // There's not enough food here to eat, leave it.\n      continue;\n    }\n\n    // Compute the distance squared.\n    const dx = x - newFood.x;\n    const dy = y - newFood.y;\n    const newDistSq = dx * dx + dy * dy;\n\n    if (!food) {\n      // No old food was found, go to this one.\n      food = newFood;\n      distSq = newDistSq;\n      continue;\n    }\n\n    // Go to the food that is closest with the most quantity.\n    if (newDistSq / newFood.quantity < distSq / food.quantity) {\n      food = newFood;\n    }\n  }\n  return food;\n}\n\nfunction keepEntityInRange({ entitySize }, width, height, entity) {\n  // Keep the entities in range, but allow them to go off the screen. Using just\n  // a modulo operation here means that they \"jump\" to the other side while still\n  // on the screen.\n  if (entity.x < -entitySize) {\n    entity.x = width + entitySize;\n  } else if (entity.x > width + entitySize) {\n    entity.x = -entitySize;\n  }\n  if (entity.y < -entitySize) {\n    entity.y = height + entitySize;\n  } else if (entity.y > height + entitySize) {\n    entity.y = -entitySize;\n  }\n}\n\nfunction maybeSubdivideEntity(config, current, entity) {\n  const { entitySubdivideEnergyLevel, random } = config;\n  const { deadEntities, livingEntities } = current;\n\n  if (entity.energy < entitySubdivideEnergyLevel) {\n    // Not ready to subdivide.\n    return;\n  }\n\n  if (deadEntities.size === 0) {\n    // There are no dead entities available. Don't add any more\n    entity.energy = entitySubdivideEnergyLevel;\n    return;\n  }\n\n  const [entity2] = deadEntities.entries().next().value;\n  deadEntities.delete(entity2);\n  livingEntities.add(entity2);\n\n  // Reduce the energy levels.\n  entity.energy = entitySubdivideEnergyLevel / random(3, 4);\n  entity2.energy = entitySubdivideEnergyLevel / random(3, 4);\n\n  // Copy the properties.\n  entity2.x = entity.x;\n  entity2.y = entity.y;\n  entity.speed = 0;\n  entity2.speed = 0;\n\n  // Jitter the positions a bit.\n  entity2.theta += random(TAU);\n  entity2.x += random(-5, 5) * devicePixelRatio;\n}\n\nfunction maybeKillEntity(config, current, entity) {\n  const { deadTimeDecomposing } = config;\n  const {\n    livingEntities,\n    deadEntities,\n    entityMinLiving,\n    recentlyDead,\n  } = current;\n  if (livingEntities.size <= entityMinLiving) {\n    // Don't kill the last entities.\n    return;\n  }\n  if (entity.energy <= 0) {\n    deadEntities.add(entity);\n    livingEntities.delete(entity);\n    recentlyDead.add({\n      x: entity.x,\n      y: entity.y,\n      theta: entity.theta,\n      speed: entity.speed,\n      energy: entity.energy,\n      energyAtDeath: entity.energy,\n      age: deadTimeDecomposing,\n    });\n  }\n}\n\nfunction generateEntities(config) {\n  const {\n    maxEntityCount,\n    entityLiveCount,\n    ctx,\n    entityBaseSpeed,\n    random,\n    entitySubdivideEnergyLevel,\n    entityThetaJitterRange,\n  } = config;\n  const { width, height } = ctx.canvas;\n  const entities = [];\n  const livingEntities = new Set();\n  const deadEntities = new Set();\n\n  for (let i = 0; i < maxEntityCount; i++) {\n    const entity = {\n      index: i,\n      x: ((ease(random(1, 0)) + 0.5) % 1) * width,\n      y: random(height),\n      energy: random(\n        entitySubdivideEnergyLevel / 2,\n        entitySubdivideEnergyLevel\n      ),\n      theta: random(TAU),\n      speed: entityBaseSpeed,\n      thetaJitter: random(-entityThetaJitterRange, entityThetaJitterRange),\n    };\n    entities.push(entity);\n\n    if (i < entityLiveCount) {\n      livingEntities.add(entity);\n    } else {\n      deadEntities.add(entity);\n    }\n  }\n\n  return { entities, livingEntities, deadEntities };\n}\n\nfunction draw(config, current) {\n  const { ctx } = config;\n  // Clear out background.\n  ctx.fillStyle = \"#000\";\n  ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  drawFoods(config, current);\n  ctx.strokeStyle = \"#fff\";\n  drawEnties(config, current.livingEntities);\n  ctx.strokeStyle = \"#833\";\n  drawEnties(config, current.recentlyDead);\n}\n\nfunction drawFoods(config, current) {\n  const { ctx, foodDrawnSize, foodDrawnSteps } = config;\n  const { foods } = current;\n  // Draw the foods\n  ctx.fillStyle = \"#07f6\";\n  for (const { quantity, x, y } of foods) {\n    const width = Math.max(\n      2 * devicePixelRatio,\n      Math.sqrt(quantity) * foodDrawnSize\n    );\n    for (let i = 1; i <= foodDrawnSteps; i++) {\n      const widthStepped = width * Math.pow(i / foodDrawnSteps, 2);\n      ctx.fillRect(\n        x - widthStepped * 0.5,\n        y - widthStepped * 0.5,\n        widthStepped,\n        widthStepped\n      );\n    }\n  }\n}\n\nfunction drawEnties(config, entities) {\n  const { ctx, entitySubdivideEnergyLevel, entitySize } = config;\n\n  ctx.lineWidth = 2 * devicePixelRatio;\n\n  // Draw each entity\n  ctx.beginPath();\n  for (const { x, y, theta, energy } of entities) {\n    const energyRatio = energy / entitySubdivideEnergyLevel;\n    const size =\n      devicePixelRatio *\n      lerp(\n        entitySize / 4,\n        entitySize,\n        // Square the energy ratio to make it more dramatic\n        energyRatio * energyRatio\n      );\n    const dx = Math.cos(theta) * size;\n    const dy = Math.sin(theta) * size;\n\n    ctx.moveTo(x, y);\n    ctx.lineTo(x - dx, y - dy);\n  }\n  ctx.stroke();\n}\n\nfunction generateFood(config, rtree) {\n  const {\n    minFoodQuantity,\n    maxFoodQuantity,\n    minFoodGrowthRate,\n    maxFoodGrowthRate,\n    foodSimplexDistribution,\n    random,\n    foodCount,\n    simplex3,\n    ctx: {\n      canvas: { width, height },\n    },\n  } = config;\n\n  const foods = [];\n  for (let foodIndex = 0; foodIndex < foodCount; foodIndex++) {\n    const x = random() * width;\n    const y = random() * height;\n    const max =\n      minFoodQuantity +\n      (maxFoodQuantity - minFoodQuantity) *\n        (simplex3(x / foodSimplexDistribution, y / foodSimplexDistribution, 0) *\n          0.5 +\n          0.5);\n    foods.push({\n      maxFoodQuantity: max,\n      quantity: random() * max,\n      x,\n      y,\n      growthRate: random(minFoodGrowthRate, maxFoodGrowthRate),\n    });\n  }\n  addFoodsToRtree(foods, rtree);\n  return foods;\n}\n\nfunction addFoodsToRtree(foods, rtree) {\n  for (const food of foods) {\n    const w = 1;\n    rtree.insert(\n      {\n        x: food.x - w / 2,\n        y: food.y - w / 2,\n        w: w,\n        h: w,\n      },\n      food\n    );\n  }\n}\n",
    "const lerp = require(\"lerp\");\n\nfunction setupCanvas() {\n  const canvas = document.createElement(\"canvas\");\n  document.body.appendChild(canvas);\n\n  function resize() {\n    canvas.width = window.innerWidth * devicePixelRatio;\n    canvas.height = window.innerHeight * devicePixelRatio;\n  }\n  resize();\n  window.addEventListener(\"resize\", resize, false);\n\n  return canvas.getContext(\"2d\", { alpha: false });\n}\n\nfunction loop(callback) {\n  const startTime = Date.now();\n  function innerLoop() {\n    callback((Date.now() - startTime) / 1000);\n    requestAnimationFrame(innerLoop);\n  }\n  requestAnimationFrame(innerLoop);\n}\n\nfunction generateSeed() {\n  const seed =\n    window.location.hash.substr(1) || String(Math.random()).split(\".\")[1];\n  console.log(\"current seed\", seed);\n\n  // Reload the page on hash change.\n  window.onhashchange = function() {\n    location.reload();\n  };\n  return seed;\n}\n\nconst TAU = Math.PI;\nfunction lerpTheta(a, b, t) {\n  a = ((a % TAU) + TAU) % TAU;\n  b = ((b % TAU) + TAU) % TAU;\n\n  if (b - a > Math.PI) {\n    a += TAU;\n  }\n  return lerp(a, b, t);\n}\n\nmodule.exports = {\n  setupCanvas,\n  loop,\n  generateSeed,\n  lerpTheta,\n};\n",
    "const lerp = require(\"lerp\");\n\nconst { PI } = Math;\nconst TAU = Math.PI * 2;\n\nfunction lerpTheta(a, b, t) {\n  // Transform a and b to be between 0 and TAU. The first modulo operation could\n  // result in a negative number, the second ensures it's positive.\n  a = ((a % TAU) + TAU) % TAU;\n  b = ((b % TAU) + TAU) % TAU;\n\n  if (b - a > PI) {\n    a += TAU;\n  }\n  return lerp(a, b, t);\n}\n\nmodule.exports = {\n  lerpTheta,\n};\n",
    "function _click(selector) {\n  const el = document.querySelector(selector);\n  if (el) el.click();\n}\n\nmodule.exports = function shortcuts(seed, restart) {\n  console.log(\n    [\n      \"Available shortcuts:\",\n      \"f: enter fullscreen\",\n      \"h: hide the ui\",\n      \"r: reload the ui\",\n      \"s: create a screenshot link\",\n      \"u: save the current seed to the URL\",\n      \"left: previous session\",\n      \"right: next session\",\n    ].join(\"\\n\")\n  );\n  window.addEventListener(\n    \"keydown\",\n    function(event) {\n      switch (event.key) {\n        case \"h\":\n          document.body.classList.toggle(\"hide-ui\");\n          break;\n        case \"r\":\n          window.location.reload();\n          break;\n        case \"s\": {\n          const canvas = document.querySelector(\"canvas\");\n          if (!canvas) {\n            console.log(\"Could not find a canvas element to screenshot\");\n            break;\n          }\n          let a = document.querySelector(\".download-link\");\n          if (!a) {\n            a = document.createElement(\"a\");\n            a.className = \"download-link\";\n            document.body.appendChild(a);\n            a.innerHTML = \"Download Screenshot\";\n            a.target = \"_blank\";\n            a.addEventListener(\"click\", () => {\n              a.style.display = \"none\";\n            });\n          }\n          a.href = canvas.toDataURL();\n          a.style.display = \"inline-block\";\n          break;\n        }\n        case \"u\":\n          history.pushState(\n            null,\n            document.title,\n            window.location.pathname + \"#\" + seed\n          );\n          break;\n        case \"f\":\n          if (document.fullscreenElement) {\n            document.exitFullscreen ? document.exitFullscreen() : null;\n          } else {\n            const canvas = document.querySelector(\"canvas\");\n            canvas.requestFullscreen ? canvas.requestFullscreen() : null;\n          }\n          if (restart) {\n            restart();\n          }\n          break;\n        case \"ArrowLeft\":\n          _click(\"#prev\");\n          break;\n        case \"ArrowRight\":\n          _click(\"#next\");\n          break;\n        default:\n        // Do nothing.\n      }\n    },\n    false\n  );\n};\n",
    "function _mashFn(){var r=4022871197;return function(n){n=n.toString();for(var t=0;t<n.length;t++){var e=.02519603282416938*(r+=n.charCodeAt(t));e-=r=e>>>0,r=(e*=r)>>>0,r+=4294967296*(e-=r)}return 2.3283064365386963e-10*(r>>>0)}}module.exports=function(){var r=Array.prototype.slice.call(arguments),n=0,t=0,e=0,a=1;0===r.length&&(r=[+new Date]);var o=_mashFn();n=t=e=o(\" \");for(var u=0;u<r.length;u++)(n-=o(r[u]))<0&&(n+=1),(t-=o(r[u]))<0&&(t+=1),(e-=o(r[u]))<0&&(e+=1);return function(){var r=2091639*n+2.3283064365386963e-10*a;return n=t,t=e,e=r-(a=0|r)}};\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsZWEuanMiXSwibmFtZXMiOlsiX21hc2hGbiIsIm4iLCJkYXRhIiwidG9TdHJpbmciLCJpIiwibGVuZ3RoIiwiaCIsImNoYXJDb2RlQXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJncyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwiczAiLCJzMSIsInMyIiwiYyIsIkRhdGUiLCJtYXNoIiwidCJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBU0EsVUFFUixJQUFJQyxFQUFJLFdBRVIsT0FBTyxTQUFlQyxHQUVyQkEsRUFBT0EsRUFBS0MsV0FFWixJQUFLLElBQUlDLEVBQUksRUFBR0EsRUFBSUYsRUFBS0csT0FBUUQsSUFBSyxDQUVyQyxJQUFJRSxFQUFJLG9CQURSTCxHQUFLQyxFQUFLSyxXQUFXSCxJQUdyQkUsR0FEQUwsRUFBSUssSUFBTSxFQUdWTCxHQURBSyxHQUFLTCxLQUNLLEVBRVZBLEdBQVMsWUFEVEssR0FBS0wsR0FHTixPQUFtQix3QkFBWEEsSUFBTSxJQUloQk8sT0FBT0MsUUFBVSxXQUVoQixJQUFJQyxFQUFPQyxNQUFNQyxVQUFVQyxNQUFNQyxLQUFLQyxXQUVsQ0MsRUFBSyxFQUNMQyxFQUFLLEVBQ0xDLEVBQUssRUFDTEMsRUFBSSxFQUVZLElBQWhCVCxFQUFLTCxTQUNSSyxFQUFPLEVBQUUsSUFBSVUsT0FHZCxJQUFJQyxFQUFPckIsVUFFWGdCLEVBQUtDLEVBQUtDLEVBQUtHLEVBQUssS0FFcEIsSUFBSSxJQUFJakIsRUFBSSxFQUFHQSxFQUFJTSxFQUFLTCxPQUFRRCxLQUUvQlksR0FBTUssRUFBS1gsRUFBS04sS0FDUCxJQUFLWSxHQUFNLElBQ3BCQyxHQUFNSSxFQUFLWCxFQUFLTixLQUNQLElBQUthLEdBQU0sSUFDcEJDLEdBQU1HLEVBQUtYLEVBQUtOLEtBQ1AsSUFBS2MsR0FBTSxHQUdyQixPQUFPLFdBQ04sSUFBSUksRUFBSSxRQUFVTixFQUFTLHVCQUFKRyxFQUd2QixPQUZBSCxFQUFLQyxFQUNMQSxFQUFLQyxFQUNFQSxFQUFLSSxHQUFLSCxFQUFRLEVBQUpHIiwiZmlsZSI6Ii9Vc2Vycy9ncmVnL21lL3Nlc3Npb25zLTJkL25vZGVfbW9kdWxlcy9AdGF0dW1jcmVhdGl2ZS9yYW5kb20vcHJuZy9hbGVhLmpzIn0=",
    "var Alea=require(5);module.exports=function(){var r=Alea.apply(this,arguments);return function(e,a,n){a=void 0===a?1:a;var t=(e=void 0===e?0:e)+r()*(a-e);return n?parseInt(t,10):t}};\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJhbmRvbS5qcyJdLCJuYW1lcyI6WyJBbGVhIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyYW5kb20iLCJhcHBseSIsInRoaXMiLCJhcmd1bWVudHMiLCJtaW4iLCJtYXgiLCJpc0Jvb2xlYW4iLCJ1bmRlZmluZWQiLCJ2YWx1ZSIsInBhcnNlSW50Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUFPQyxRQUFRLGVBRW5CQyxPQUFPQyxRQUFVLFdBRWhCLElBQUlDLEVBQVNKLEtBQUtLLE1BQU1DLEtBQU1DLFdBRTlCLE9BQU8sU0FBdUJDLEVBQUtDLEVBQUtDLEdBR3ZDRCxPQUFjRSxJQUFSRixFQUFvQixFQUFJQSxFQUM5QixJQUFJRyxHQUZKSixPQUFjRyxJQUFSSCxFQUFvQixFQUFJQSxHQUVaSixLQUFZSyxFQUFNRCxHQUVwQyxPQUFPRSxFQUFZRyxTQUFVRCxFQUFPLElBQU9BIiwiZmlsZSI6Ii9Vc2Vycy9ncmVnL21lL3Nlc3Npb25zLTJkL25vZGVfbW9kdWxlcy9AdGF0dW1jcmVhdGl2ZS9yYW5kb20vcmFuZG9tLmpzIn0=",
    "function sineInOut(n){return-.5*(Math.cos(Math.PI*n)-1)}module.exports=sineInOut;\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbmUtaW4tb3V0LmpzIl0sIm5hbWVzIjpbInNpbmVJbk91dCIsInQiLCJNYXRoIiwiY29zIiwiUEkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxVQUFVQyxHQUNqQixPQUFRLElBQU9DLEtBQUtDLElBQUlELEtBQUtFLEdBQUdILEdBQUssR0FHdkNJLE9BQU9DLFFBQVVOIiwiZmlsZSI6Ii9Vc2Vycy9ncmVnL21lL3Nlc3Npb25zLTJkL25vZGVfbW9kdWxlcy9lYXNlcy9zaW5lLWluLW91dC5qcyJ9",
    "function lerp(e,r,l){return e*(1-l)+r*l}module.exports=lerp;\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImxlcnAiLCJ2MCIsInYxIiwidCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEtBQUtDLEVBQUlDLEVBQUlDLEdBQ2xCLE9BQU9GLEdBQUksRUFBRUUsR0FBR0QsRUFBR0MsRUFFdkJDLE9BQU9DLFFBQVVMIiwiZmlsZSI6Ii9Vc2Vycy9ncmVnL21lL3Nlc3Npb25zLTJkL25vZGVfbW9kdWxlcy9sZXJwL2luZGV4LmpzIn0=",
    "\"use strict\";var rectangle=require(11),bbox=function(e,o){if(o&&o.bbox)return{leaf:o,x:o.bbox[0],y:o.bbox[1],w:o.bbox[2]-o.bbox[0],h:o.bbox[3]-o.bbox[1]};for(var t=e.length,r=0,n=new Array(t);r<t;)n[r]=[e[r][0],e[r][1]],r++;var a=n[0];t=n.length,r=1;for(var i={min:[].concat(a),max:[].concat(a)};r<t;)n[r][0]<i.min[0]?i.min[0]=n[r][0]:n[r][0]>i.max[0]&&(i.max[0]=n[r][0]),n[r][1]<i.min[1]?i.min[1]=n[r][1]:n[r][1]>i.max[1]&&(i.max[1]=n[r][1]),r++;var c={x:i.min[0],y:i.min[1],w:i.max[0]-i.min[0],h:i.max[1]-i.min[1]};return o&&(c.leaf=o),c},geoJSON={point:function(e,o){return o.insertSubtree({x:e.geometry.coordinates[0],y:e.geometry.coordinates[1],w:0,h:0,leaf:e},o.root)},multiPointLineString:function(e,o){return o.insertSubtree(bbox(e.geometry.coordinates,e),o.root)},multiLineStringPolygon:function(e,o){return o.insertSubtree(bbox(Array.prototype.concat.apply([],e.geometry.coordinates),e),o.root)},multiPolygon:function(e,o){return o.insertSubtree(bbox(Array.prototype.concat.apply([],Array.prototype.concat.apply([],e.geometry.coordinates)),e),o.root)},makeRec:function(e){return rectangle(e.x,e.y,e.w,e.h)},geometryCollection:function(e,o){if(e.bbox)return o.insertSubtree({leaf:e,x:e.bbox[0],y:e.bbox[1],w:e.bbox[2]-e.bbox[0],h:e.bbox[3]-e.bbox[1]},o.root);for(var t,r=e.geometry.geometries,n=0,a=r.length,i=[];n<a;){switch((t=r[n]).type){case\"Point\":i.push(geoJSON.makeRec({x:t.coordinates[0],y:t.coordinates[1],w:0,h:0}));break;case\"MultiPoint\":case\"LineString\":i.push(geoJSON.makeRec(bbox(t.coordinates)));break;case\"MultiLineString\":case\"Polygon\":i.push(geoJSON.makeRec(bbox(Array.prototype.concat.apply([],t.coordinates))));break;case\"MultiPolygon\":i.push(geoJSON.makeRec(bbox(Array.prototype.concat.apply([],Array.prototype.concat.apply([],t.coordinates)))));break;case\"GeometryCollection\":a=(r=r.concat(t.geometries)).length}n++}var c=i[0];for(n=1,a=i.length;n<a;)c.expand(i[n]),n++;return o.insertSubtree({leaf:e,x:c.x(),y:c.y(),h:c.h(),w:c.w()},o.root)}};exports.geoJSON=function(e){var o,t;if(Array.isArray(e))o=e.slice();else if(e.features&&Array.isArray(e.features))o=e.features.slice();else{if(!(e instanceof Object))throw\"this isn't what we're looking for\";o=[e]}for(var r=o.length,n=0;n<r;){if(\"Feature\"===(t=o[n]).type)switch(t.geometry.type){case\"Point\":geoJSON.point(t,this);break;case\"MultiPoint\":case\"LineString\":geoJSON.multiPointLineString(t,this);break;case\"MultiLineString\":case\"Polygon\":geoJSON.multiLineStringPolygon(t,this);break;case\"MultiPolygon\":geoJSON.multiPolygon(t,this);break;case\"GeometryCollection\":geoJSON.geometryCollection(t,this)}n++}},exports.bbox=function(){var e,o,t,r;switch(arguments.length){case 1:e=arguments[0][0][0],o=arguments[0][0][1],t=arguments[0][1][0],r=arguments[0][1][1];break;case 2:e=arguments[0][0],o=arguments[0][1],t=arguments[1][0],r=arguments[1][1];break;case 4:e=arguments[0],o=arguments[1],t=arguments[2],r=arguments[3]}return this.search({x:e,y:o,w:t-e,h:r-o})};\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlb2pzb24uanMiXSwibmFtZXMiOlsicmVjdGFuZ2xlIiwicmVxdWlyZSIsImJib3giLCJhciIsIm9iaiIsImxlYWYiLCJ4IiwieSIsInciLCJoIiwibGVuIiwibGVuZ3RoIiwiaSIsImEiLCJBcnJheSIsImZpcnN0IiwidGVtcCIsIm1pbiIsImNvbmNhdCIsIm1heCIsIm91dCIsImdlb0pTT04iLCJwb2ludCIsInNlbGYiLCJpbnNlcnRTdWJ0cmVlIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsInJvb3QiLCJtdWx0aVBvaW50TGluZVN0cmluZyIsIm11bHRpTGluZVN0cmluZ1BvbHlnb24iLCJwcm90b3R5cGUiLCJhcHBseSIsIm11bHRpUG9seWdvbiIsIm1ha2VSZWMiLCJnZW9tZXRyeUNvbGxlY3Rpb24iLCJnIiwiZ2VvcyIsImdlb21ldHJpZXMiLCJ0eXBlIiwicHVzaCIsImV4cGFuZCIsImV4cG9ydHMiLCJwcmVsaW0iLCJmZWF0dXJlcyIsImZlYXR1cmUiLCJpc0FycmF5Iiwic2xpY2UiLCJPYmplY3QiLCJ0aGlzIiwieDEiLCJ5MSIsIngyIiwieTIiLCJhcmd1bWVudHMiLCJzZWFyY2giXSwibWFwcGluZ3MiOiJBQUFBLGFBQ0EsSUFBSUEsVUFBWUMsUUFBUSxlQUNwQkMsS0FBTyxTQUFVQyxFQUFJQyxHQUN2QixHQUFJQSxHQUFPQSxFQUFJRixLQUNiLE1BQU8sQ0FDTEcsS0FBTUQsRUFDTkUsRUFBR0YsRUFBSUYsS0FBSyxHQUNaSyxFQUFHSCxFQUFJRixLQUFLLEdBQ1pNLEVBQUdKLEVBQUlGLEtBQUssR0FBS0UsRUFBSUYsS0FBSyxHQUMxQk8sRUFBR0wsRUFBSUYsS0FBSyxHQUFLRSxFQUFJRixLQUFLLElBTTlCLElBSEEsSUFBSVEsRUFBTVAsRUFBR1EsT0FDVEMsRUFBSSxFQUNKQyxFQUFJLElBQUlDLE1BQU1KLEdBQ1hFLEVBQUlGLEdBQ1RHLEVBQUVELEdBQUssQ0FBQ1QsRUFBR1MsR0FBRyxHQUFJVCxFQUFHUyxHQUFHLElBQ3hC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LEVBMUJ4QkksTUEyQkwsTUFDRixJQUFLLGtCQUdMLElBQUssVUFDSDNCLFFBQVFRLHVCQUF1QmUsRUFoQzFCSSxNQWlDTCxNQUNGLElBQUssZUFDSDNCLFFBQVFXLGFBQWFZLEVBbkNoQkksTUFvQ0wsTUFDRixJQUFLLHFCQUNIM0IsUUFBUWEsbUJBQW1CVSxFQXRDdEJJLE1BMENUcEMsTUFHSjZCLFFBQVF2QyxLQUFPLFdBQ2IsSUFBSStDLEVBQUlDLEVBQUlDLEVBQUlDLEVBQ2hCLE9BQVFDLFVBQVUxQyxRQUNsQixLQUFLLEVBQ0hzQyxFQUFLSSxVQUFVLEdBQUcsR0FBRyxHQUNyQkgsRUFBS0csVUFBVSxHQUFHLEdBQUcsR0FDckJGLEVBQUtFLFVBQVUsR0FBRyxHQUFHLEdBQ3JCRCxFQUFLQyxVQUFVLEdBQUcsR0FBRyxHQUNyQixNQUNGLEtBQUssRUFDSEosRUFBS0ksVUFBVSxHQUFHLEdBQ2xCSCxFQUFLRyxVQUFVLEdBQUcsR0FDbEJGLEVBQUtFLFVBQVUsR0FBRyxHQUNsQkQsRUFBS0MsVUFBVSxHQUFHLEdBQ2xCLE1BQ0YsS0FBSyxFQUNISixFQUFLSSxVQUFVLEdBQ2ZILEVBQUtHLFVBQVUsR0FDZkYsRUFBS0UsVUFBVSxHQUNmRCxFQUFLQyxVQUFVLEdBSWpCLE9BQU9MLEtBQUtNLE9BQU8sQ0FDakJoRCxFQUFHMkMsRUFDSDFDLEVBQUcyQyxFQUNIMUMsRUFBRzJDLEVBQUtGLEVBQ1J4QyxFQUFHMkMsRUFBS0YiLCJmaWxlIjoiL1VzZXJzL2dyZWcvbWUvc2Vzc2lvbnMtMmQvbm9kZV9tb2R1bGVzL3J0cmVlL2xpYi9nZW9qc29uLmpzIn0=",
    "\"use strict\";var RTree=require(12),geojson=require(9);RTree.prototype.bbox=geojson.bbox,RTree.prototype.geoJSON=geojson.geoJSON,RTree.Rectangle=require(11),module.exports=RTree;\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlJUcmVlIiwicmVxdWlyZSIsImdlb2pzb24iLCJwcm90b3R5cGUiLCJiYm94IiwiZ2VvSlNPTiIsIlJlY3RhbmdsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLGFBQ0EsSUFBSUEsTUFBUUMsUUFBUSxXQUNoQkMsUUFBVUQsUUFBUSxhQUN0QkQsTUFBTUcsVUFBVUMsS0FBT0YsUUFBUUUsS0FDL0JKLE1BQU1HLFVBQVVFLFFBQVVILFFBQVFHLFFBQ2xDTCxNQUFNTSxVQUFZTCxRQUFRLGVBQzFCTSxPQUFPQyxRQUFVUiIsImZpbGUiOiIvVXNlcnMvZ3JlZy9tZS9zZXNzaW9ucy0yZC9ub2RlX21vZHVsZXMvcnRyZWUvbGliL2luZGV4LmpzIn0=",
    "\"use strict\";function Rectangle(n,t,e,r){if(!(this instanceof Rectangle))return new Rectangle(n,t,e,r);var x,i,u;n.x?(e=n.w,r=n.h,t=n.y,0!==n.w&&!n.w&&n.x2?(e=n.x2-n.x,r=n.y2-n.y):(e=n.w,r=n.h),n=n.x,x=n+e,i=t+r,u=!(r+e)):(x=n+e,i=t+r,u=!(r+e)),this.x1=this.x=function(){return n},this.y1=this.y=function(){return t},this.x2=function(){return x},this.y2=function(){return i},this.w=function(){return e},this.h=function(){return r},this.p=function(){return u},this.overlap=function(e){return u||e.p()?n<=e.x2()&&x>=e.x()&&t<=e.y2()&&i>=e.y():n<e.x2()&&x>e.x()&&t<e.y2()&&i>e.y()},this.expand=function(u){var y,c,h=u.x(),a=u.y(),o=u.x2(),f=u.y2();return y=n>h?h:n,c=t>a?a:t,e=x>o?x-y:o-y,r=i>f?i-c:f-c,n=y,t=c,this}}Rectangle.overlapRectangle=function(n,t){return 0===n.h&&0===n.w||0===t.h&&0===t.w?n.x<=t.x+t.w&&n.x+n.w>=t.x&&n.y<=t.y+t.h&&n.y+n.h>=t.y:n.x<t.x+t.w&&n.x+n.w>t.x&&n.y<t.y+t.h&&n.y+n.h>t.y},Rectangle.containsRectangle=function(n,t){return n.x+n.w<=t.x+t.w&&n.x>=t.x&&n.y+n.h<=t.y+t.h&&n.y>=t.y},Rectangle.expandRectangle=function(n,t){var e,r,x=n.x+n.w,i=t.x+t.w,u=n.y+n.h,y=t.y+t.h;return e=n.x>t.x?t.x:n.x,r=n.y>t.y?t.y:n.y,n.w=x>i?x-e:i-e,n.h=u>y?u-r:y-r,n.x=e,n.y=r,n},Rectangle.makeMBR=function(n,t){if(!n.length)return{x:0,y:0,w:0,h:0};(t=t||{}).x=n[0].x,t.y=n[0].y,t.w=n[0].w,t.h=n[0].h;for(var e=1,r=n.length;e<r;e++)Rectangle.expandRectangle(t,n[e]);return t},Rectangle.squarifiedRatio=function(n,t,e){var r=(n+t)/2,x=n*t;return x*e/(x/(r*r))},module.exports=Rectangle;\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlY3RhbmdsZS5qcyJdLCJuYW1lcyI6WyJSZWN0YW5nbGUiLCJ4IiwieSIsInciLCJoIiwidGhpcyIsIngyIiwieTIiLCJwIiwieDEiLCJ5MSIsIm92ZXJsYXAiLCJhIiwiZXhwYW5kIiwibngiLCJueSIsImF4IiwiYXkiLCJheDIiLCJheTIiLCJvdmVybGFwUmVjdGFuZ2xlIiwiYiIsImNvbnRhaW5zUmVjdGFuZ2xlIiwiZXhwYW5kUmVjdGFuZ2xlIiwiYXh3IiwiYnh3IiwiYXloIiwiYnloIiwibWFrZU1CUiIsIm5vZGVzIiwicmVjdCIsImxlbmd0aCIsImkiLCJsZW4iLCJzcXVhcmlmaWVkUmF0aW8iLCJsIiwiZmlsbCIsImxwZXJpIiwibGFyZWEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxhQUNBLFNBQVNBLFVBQVVDLEVBQUdDLEVBQUdDLEVBQUdDLEdBQzFCLEtBQU1DLGdCQUFnQkwsV0FDcEIsT0FBTyxJQUFJQSxVQUFVQyxFQUFHQyxFQUFHQyxFQUFHQyxHQUVoQyxJQUFJRSxFQUFJQyxFQUFJQyxFQUVSUCxFQUFFQSxHQUNKRSxFQUFJRixFQUFFRSxFQUNOQyxFQUFJSCxFQUFFRyxFQUNORixFQUFJRCxFQUFFQyxFQUNNLElBQVJELEVBQUVFLElBQVlGLEVBQUVFLEdBQUtGLEVBQUVLLElBQ3pCSCxFQUFJRixFQUFFSyxHQUFLTCxFQUFFQSxFQUNiRyxFQUFJSCxFQUFFTSxHQUFLTixFQUFFQyxJQUdiQyxFQUFJRixFQUFFRSxFQUNOQyxFQUFJSCxFQUFFRyxHQUVSSCxFQUFJQSxFQUFFQSxFQUVOSyxFQUFLTCxFQUFJRSxFQUNUSSxFQUFLTCxFQUFJRSxFQUNUSSxJQUFLSixFQUFJRCxLQUlURyxFQUFLTCxFQUFJRSxFQUNUSSxFQUFLTCxFQUFJRSxFQUNUSSxJQUFLSixFQUFJRCxJQUdYRSxLQUFLSSxHQUFLSixLQUFLSixFQUFJLFdBQ2pCLE9BQU9BLEdBRVRJLEtBQUtLLEdBQUtMLEtBQUtILEVBQUksV0FDakIs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QUFHLElBR1AwQixFQUFPQSxHQUFRLElBQ1Y3QixFQUFJNEIsRUFBTSxHQUFHNUIsRUFDbEI2QixFQUFLNUIsRUFBSTJCLEVBQU0sR0FBRzNCLEVBQ2xCNEIsRUFBSzNCLEVBQUkwQixFQUFNLEdBQUcxQixFQUNsQjJCLEVBQUsxQixFQUFJeUIsRUFBTSxHQUFHekIsRUFFbEIsSUFBSyxJQUFJNEIsRUFBSSxFQUFHQyxFQUFNSixFQUFNRSxPQUFRQyxFQUFJQyxFQUFLRCxJQUMzQ2hDLFVBQVV1QixnQkFBZ0JPLEVBQU1ELEVBQU1HLElBR3hDLE9BQU9GLEdBRVQ5QixVQUFVa0MsZ0JBQWtCLFNBQVVDLEVBQUdoQyxFQUFHaUMsR0FFMUMsSUFBSUMsR0FBU0YsRUFBSWhDLEdBQUssRUFDbEJtQyxFQUFRSCxFQUFJaEMsRUFLaEIsT0FBT21DLEVBQVFGLEdBREpFLEdBQVNELEVBQVFBLEtBRzlCRSxPQUFPQyxRQUFVeEMiLCJmaWxlIjoiL1VzZXJzL2dyZWcvbWUvc2Vzc2lvbnMtMmQvbm9kZV9tb2R1bGVzL3J0cmVlL2xpYi9yZWN0YW5nbGUuanMifQ==",
    "\"use strict\";var rectangle=require(11);function RTree(e){if(!(this instanceof RTree))return new RTree(e);var n=3,t=6;isNaN(e)||(n=Math.floor(e/2),t=e);var r={x:0,y:0,w:0,h:0,id:\"root\",nodes:[]};this.root=r;var a=function(e){for(var n,t=e.slice(),r=[];t.length;)(n=t.pop()).nodes?t=t.concat(n.nodes):n.leaf&&r.push(n);return r},s=function(e,t,r){var s,o,h,i=[],d=[],g=[];if(!e||!rectangle.overlapRectangle(e,r))return g;var f={x:e.x,y:e.y,w:e.w,h:e.h,target:t};for(d.push(r.nodes.length),i.push(r);i.length>0;){if(s=i.pop(),o=d.pop()-1,\"target\"in f)for(;o>=0;){if(h=s.nodes[o],rectangle.overlapRectangle(f,h)){if(f.target&&\"leaf\"in h&&h.leaf===f.target||!f.target&&(\"leaf\"in h||rectangle.containsRectangle(h,f))){g=\"nodes\"in h?a(s.nodes.splice(o,1)):s.nodes.splice(o,1),rectangle.makeMBR(s.nodes,s),delete f.target;break}\"nodes\"in h&&(0,d.push(o),i.push(s),s=h,o=h.nodes.length)}o--}else if(\"nodes\"in f){s.nodes.splice(o+1,1),s.nodes.length>0&&rectangle.makeMBR(s.nodes,s);for(var u=0;u<f.nodes.length;u++)c(f.nodes[u],s);f.nodes=[],0===i.length&&s.nodes.length<=1?(f.nodes=l(s,!0,f.nodes,s),s.nodes=[],i.push(s),d.push(1)):i.length>0&&s.nodes.length<n?(f.nodes=l(s,!0,f.nodes,s),s.nodes=[]):delete f.nodes}else rectangle.makeMBR(s.nodes,s);1}return g},o=function(e){for(var n=i(e);e.length>0;)h(e,n[0],n[1]);return n},h=function(e,t,r){for(var a,s,o,h=rectangle.squarifiedRatio(t.w,t.h,t.nodes.length+1),i=rectangle.squarifiedRatio(r.w,r.h,r.nodes.length+1),l=e.length-1;l>=0;l--){var c=e[l],d={};d.x=Math.min(t.x,c.x),d.y=Math.min(t.y,c.y),d.w=Math.max(t.x+t.w,c.x+c.w)-d.x,d.h=Math.max(t.y+t.h,c.y+c.h)-d.y;var g=Math.abs(rectangle.squarifiedRatio(d.w,d.h,t.nodes.length+2)-h),f={};f.x=Math.min(r.x,c.x),f.y=Math.min(r.y,c.y),f.w=Math.max(r.x+r.w,c.x+c.w)-f.x,f.h=Math.max(r.y+r.h,c.y+c.h)-f.y;var u=Math.abs(rectangle.squarifiedRatio(f.w,f.h,r.nodes.length+2)-i);(!s||!a||Math.abs(u-g)<a)&&(s=l,a=Math.abs(u-g),o=u<g?r:t)}var p=e.splice(s,1)[0];t.nodes.length+e.length+1<=n?(t.nodes.push(p),rectangle.expandRectangle(t,p)):r.nodes.length+e.length+1<=n?(r.nodes.push(p),rectangle.expandRectangle(r,p)):(o.nodes.push(p),rectangle.expandRectangle(o,p))},i=function(e){for(var n,t,r=e.length-1,a=0,s=e.length-1,o=0,h=e.length-2;h>=0;h--){var i=e[h];i.x>e[a].x?a=h:i.x+i.w<e[r].x+e[r].w&&(r=h),i.y>e[o].y?o=h:i.y+i.h<e[s].y+e[s].h&&(s=h)}return Math.abs(e[r].x+e[r].w-e[a].x)>Math.abs(e[s].y+e[s].h-e[o].y)?r>a?(n=e.splice(r,1)[0],t=e.splice(a,1)[0]):(t=e.splice(a,1)[0],n=e.splice(r,1)[0]):s>o?(n=e.splice(s,1)[0],t=e.splice(o,1)[0]):(t=e.splice(o,1)[0],n=e.splice(s,1)[0]),[{x:n.x,y:n.y,w:n.w,h:n.h,nodes:[n]},{x:t.x,y:t.y,w:t.w,h:t.h,nodes:[t]}]},l=function(e,n,t,r){var a=[];if(!rectangle.overlapRectangle(e,r))return t;for(a.push(r.nodes);a.length>0;)for(var s=a.pop(),o=s.length-1;o>=0;o--){var h=s[o];rectangle.overlapRectangle(e,h)&&(\"nodes\"in h?a.push(h.nodes):\"leaf\"in h&&(n?t.push(h):t.push(h.leaf)))}return t},c=function(e,n){var r;if(0===n.nodes.length)return n.x=e.x,n.y=e.y,n.w=e.w,n.h=e.h,void n.nodes.push(e);for(var a,s=function(e,n){var t,r=-1,a=[],s=!0;a.push(n);for(var o=n.nodes;s||-1!==r;){s?s=!1:(a.push(o[r]),o=o[r].nodes,r=-1);for(var h=o.length-1;h>=0;h--){var i=o[h];if(\"leaf\"in i){r=-1;break}var l=rectangle.squarifiedRatio(i.w,i.h,i.nodes.length+1),c=Math.max(i.x+i.w,e.x+e.w)-Math.min(i.x,e.x),d=Math.max(i.y+i.h,e.y+e.h)-Math.min(i.y,e.y),g=rectangle.squarifiedRatio(c,d,i.nodes.length+2);(r<0||Math.abs(g-l)<t)&&(t=Math.abs(g-l),r=h)}}return a}(e,n),h=e;s.length>0;){if(r&&\"nodes\"in r&&0===r.nodes.length){a=r,r=s.pop();for(var i=0;i<r.nodes.length;i++)if(r.nodes[i]===a||0===r.nodes[i].nodes.length){r.nodes.splice(i,1);break}}else r=s.pop();if(\"leaf\"in h||\"nodes\"in h||Array.isArray(h)){if(Array.isArray(h)){for(var l=0;l<h.length;l++)rectangle.expandRectangle(r,h[l]);r.nodes=r.nodes.concat(h)}else rectangle.expandRectangle(r,h),r.nodes.push(h);if(r.nodes.length<=t)h={x:r.x,y:r.y,w:r.w,h:r.h};else{var c=o(r.nodes);h=c,s.length<1&&(r.nodes.push(c[0]),s.push(r),h=c[1])}}else rectangle.expandRectangle(r,h),h={x:r.x,y:r.y,w:r.w,h:r.h}}};this.insertSubtree=c,this.getTree=function(){return r},this.setTree=function(e,n){return n||(n=r),a=e,(t=n).nodes=a.nodes,t.x=a.x,t.y=a.y,t.w=a.w,t.h=a.h,t;var t,a},this.search=function(e,n,t){return l(e,n,t=t||[],r)};this.remove=function(e,n){return n&&\"function\"!=typeof n?function(e,n){return s(e,n,r)}(e,n):function(e){for(var n,t=1,a=[];t>0;)t=(n=s(e,!1,r)).length,a=a.concat(n);return a}(e)},this.insert=function(e,n){return c({x:e.x,y:e.y,w:e.w,h:e.h,leaf:n},r)}}RTree.prototype.toJSON=function(e){return JSON.stringify(this.root,!1,e)},RTree.fromJSON=function(e){var n=new RTree;return n.setTree(JSON.parse(e)),n},module.exports=RTree,\"function\"!=typeof Array.isArray&&(Array.isArray=function(e){return\"object\"==typeof e&&\"[object Array]\"==={}.toString.call(e)});\n\n//# sourceMappingURL=data:application/json;base64,",
    "!function(){\"use strict\";var r=.5*(Math.sqrt(3)-1),e=(3-Math.sqrt(3))/6,t=1/6,a=(Math.sqrt(5)-1)/4,o=(5-Math.sqrt(5))/20;function i(r){var e;e=\"function\"==typeof r?r:r?function(){var r=0,e=0,t=0,a=1,o=(i=4022871197,function(r){r=r.toString();for(var e=0;e<r.length;e++){var t=.02519603282416938*(i+=r.charCodeAt(e));t-=i=t>>>0,i=(t*=i)>>>0,i+=4294967296*(t-=i)}return 2.3283064365386963e-10*(i>>>0)});var i;r=o(\" \"),e=o(\" \"),t=o(\" \");for(var n=0;n<arguments.length;n++)(r-=o(arguments[n]))<0&&(r+=1),(e-=o(arguments[n]))<0&&(e+=1),(t-=o(arguments[n]))<0&&(t+=1);return o=null,function(){var o=2091639*r+2.3283064365386963e-10*a;return r=e,e=t,t=o-(a=0|o)}}(r):Math.random,this.p=n(e),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(var t=0;t<512;t++)this.perm[t]=this.p[255&t],this.permMod12[t]=this.perm[t]%12}function n(r){var e,t=new Uint8Array(256);for(e=0;e<256;e++)t[e]=e;for(e=0;e<255;e++){var a=e+~~(r()*(256-e)),o=t[e];t[e]=t[a],t[a]=o}return t}i.prototype={grad3:new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),grad4:new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]),noise2D:function(t,a){var o,i,n=this.permMod12,f=this.perm,s=this.grad3,v=0,h=0,l=0,u=(t+a)*r,d=Math.floor(t+u),p=Math.floor(a+u),M=(d+p)*e,m=t-(d-M),c=a-(p-M);m>c?(o=1,i=0):(o=0,i=1);var y=m-o+e,w=c-i+e,g=m-1+2*e,A=c-1+2*e,x=255&d,q=255&p,D=.5-m*m-c*c;if(D>=0){var S=3*n[x+f[q]];v=(D*=D)*D*(s[S]*m+s[S+1]*c)}var U=.5-y*y-w*w;if(U>=0){var b=3*n[x+o+f[q+i]];h=(U*=U)*U*(s[b]*y+s[b+1]*w)}var F=.5-g*g-A*A;if(F>=0){var N=3*n[x+1+f[q+1]];l=(F*=F)*F*(s[N]*g+s[N+1]*A)}return 70*(v+h+l)},noise3D:function(r,e,a){var o,i,n,f,s,v,h,l,u,d,p=this.permMod12,M=this.perm,m=this.grad3,c=(r+e+a)*(1/3),y=Math.floor(r+c),w=Math.floor(e+c),g=Math.floor(a+c),A=(y+w+g)*t,x=r-(y-A),q=e-(w-A),D=a-(g-A);x>=q?q>=D?(s=1,v=0,h=0,l=1,u=1,d=0):x>=D?(s=1,v=0,h=0,l=1,u=0,d=1):(s=0,v=0,h=1,l=1,u=0,d=1):q<D?(s=0,v=0,h=1,l=0,u=1,d=1):x<D?(s=0,v=1,h=0,l=0,u=1,d=1):(s=0,v=1,h=0,l=1,u=1,d=0);var S=x-s+t,U=q-v+t,b=D-h+t,F=x-l+2*t,N=q-u+2*t,C=D-d+2*t,P=x-1+.5,T=q-1+.5,_=D-1+.5,j=255&y,k=255&w,z=255&g,B=.6-x*x-q*q-D*D;if(B<0)o=0;else{var E=3*p[j+M[k+M[z]]];o=(B*=B)*B*(m[E]*x+m[E+1]*q+m[E+2]*D)}var G=.6-S*S-U*U-b*b;if(G<0)i=0;else{var H=3*p[j+s+M[k+v+M[z+h]]];i=(G*=G)*G*(m[H]*S+m[H+1]*U+m[H+2]*b)}var I=.6-F*F-N*N-C*C;if(I<0)n=0;else{var J=3*p[j+l+M[k+u+M[z+d]]];n=(I*=I)*I*(m[J]*F+m[J+1]*N+m[J+2]*C)}var K=.6-P*P-T*T-_*_;if(K<0)f=0;else{var L=3*p[j+1+M[k+1+M[z+1]]];f=(K*=K)*K*(m[L]*P+m[L+1]*T+m[L+2]*_)}return 32*(o+i+n+f)},noise4D:function(r,e,t,i){var n,f,s,v,h,l,u,d,p,M,m,c,y,w,g,A,x,q=this.perm,D=this.grad4,S=(r+e+t+i)*a,U=Math.floor(r+S),b=Math.floor(e+S),F=Math.floor(t+S),N=Math.floor(i+S),C=(U+b+F+N)*o,P=r-(U-C),T=e-(b-C),_=t-(F-C),j=i-(N-C),k=0,z=0,B=0,E=0;P>T?k++:z++,P>_?k++:B++,P>j?k++:E++,T>_?z++:B++,T>j?z++:E++,_>j?B++:E++;var G=P-(l=k>=3?1:0)+o,H=T-(u=z>=3?1:0)+o,I=_-(d=B>=3?1:0)+o,J=j-(p=E>=3?1:0)+o,K=P-(M=k>=2?1:0)+2*o,L=T-(m=z>=2?1:0)+2*o,O=_-(c=B>=2?1:0)+2*o,Q=j-(y=E>=2?1:0)+2*o,R=P-(w=k>=1?1:0)+3*o,V=T-(g=z>=1?1:0)+3*o,W=_-(A=B>=1?1:0)+3*o,X=j-(x=E>=1?1:0)+3*o,Y=P-1+4*o,Z=T-1+4*o,$=_-1+4*o,rr=j-1+4*o,er=255&U,tr=255&b,ar=255&F,or=255&N,ir=.6-P*P-T*T-_*_-j*j;if(ir<0)n=0;else{var nr=q[er+q[tr+q[ar+q[or]]]]%32*4;n=(ir*=ir)*ir*(D[nr]*P+D[nr+1]*T+D[nr+2]*_+D[nr+3]*j)}var fr=.6-G*G-H*H-I*I-J*J;if(fr<0)f=0;else{var sr=q[er+l+q[tr+u+q[ar+d+q[or+p]]]]%32*4;f=(fr*=fr)*fr*(D[sr]*G+D[sr+1]*H+D[sr+2]*I+D[sr+3]*J)}var vr=.6-K*K-L*L-O*O-Q*Q;if(vr<0)s=0;else{var hr=q[er+M+q[tr+m+q[ar+c+q[or+y]]]]%32*4;s=(vr*=vr)*vr*(D[hr]*K+D[hr+1]*L+D[hr+2]*O+D[hr+3]*Q)}var lr=.6-R*R-V*V-W*W-X*X;if(lr<0)v=0;else{var ur=q[er+w+q[tr+g+q[ar+A+q[or+x]]]]%32*4;v=(lr*=lr)*lr*(D[ur]*R+D[ur+1]*V+D[ur+2]*W+D[ur+3]*X)}var dr=.6-Y*Y-Z*Z-$*$-rr*rr;if(dr<0)h=0;else{var pr=q[er+1+q[tr+1+q[ar+1+q[or+1]]]]%32*4;h=(dr*=dr)*dr*(D[pr]*Y+D[pr+1]*Z+D[pr+2]*$+D[pr+3]*rr)}return 27*(n+f+s+v+h)}},i._buildPermutationTable=n,\"undefined\"!=typeof define&&define.amd&&define(function(){return i}),\"undefined\"!=typeof exports?exports.SimplexNoise=i:\"undefined\"!=typeof window&&(window.SimplexNoise=i),\"undefined\"!=typeof module&&(module.exports=i)}();\n\n//# sourceMappingURL=data:application/json;base64,"
  ]
}